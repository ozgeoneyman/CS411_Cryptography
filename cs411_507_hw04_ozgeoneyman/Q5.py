

from Crypto.Hash import SHAKE128

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y

def modinv(a, m):
    if a < 0:
        a = a+m
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m


q = 21050461915163064005698472752818467960484664222419461240422905587329
p = 16635001268424770248362496020878982794855973042727123110276218221363115248532121656926998495324422884201900546908247299422529867020257795305915603399119784123817977551475938749843630747090805551303187823118917870107061292013527768094302098323705503978319951833567419037832636219099472142540390679316084341253020797072674386750831658161591413643898670788050409197352632518762512104827405576470131295832318199648795861715154786017505168792207090684639374274256123402219808087541722302681946268933484824286411774800000044873249941828965744594817357937388103636107551213520018336143107199947863581191230243194303971728193
g = 4093162097966074909687347020209828087793387673878863126522370015312513519384142780904183350879136499577997486930584564361373787892130310216018419844953120490173178167961210626495302179022102966346401633568701341813950346017879745914354235905150097733206658436685677927875863855424737078133856082288012444874515641657250388958820689890965646458323419139946043329041958728315521559242956876862378305965351919813096282501399946650773581860000063461694337229760574290064109735382625674977271086556584115485005391564506450111814727077599886511786891728656704219642617413639064440921727292947646859466643167910307728438276
publickeybeta =3330001424503044325932197676136127266689391995091913015672597381088363195443636436214100590508995319643488427125424686523948044137259202338907646703934598548017408323184017924886648962864744316964924113022186198950356963907891485247777163647671390447197859117383473236224866812457281418747109659529110082818277631210752087862841216075741167889905488089669423185704020852396281310433750953573745705629323883712097669867644208372177477427478678910590717109433071441763118202206656013354491876405578183340130479272394166426285634289785202101955376163382958091547009006419080716225036628147308639272669903679362104917651

(message1, r1, s1) = (b"Asking questions during the lectures helps you understand Crypto", 260444855760506318805841590364189311211267498403457607938240440795,15045429964567421250403275656320025283600046882519690784113588548158)
(message2, r2, s2) = (b"Keep your friends close, but your enemies closer",260444855760506318805841590364189311211267498403457607938240440795,14016151436550334193141059702675072658308100333231844563375725796770)

shake1 = SHAKE128.new(message1)
h1 = int.from_bytes(shake1.read( q.bit_length() // 8), byteorder='big')

shake2 = SHAKE128.new(message2)
h2 = int.from_bytes(shake2.read( q.bit_length() // 8), byteorder='big')


a = ( r1 * ( s2 - s1)) % q
b = modinv(a,q)
key = (( s1 * h2 - s2 * h1) * b) % q   ## The private key is 18011493590957919843196654272530256451916130571913898417508651137437

if pow(g,key,p) == publickeybeta:
  print('Private key: ', key)

